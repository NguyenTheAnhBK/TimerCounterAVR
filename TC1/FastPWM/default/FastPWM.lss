
FastPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000009d  00000000  00000000  0000017f  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000054  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000b6  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000328  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000096  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	45 c0       	rjmp	.+138    	; 0x8e <__vector_1>
   4:	54 c0       	rjmp	.+168    	; 0xae <__vector_2>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	4c c0       	rjmp	.+152    	; 0xce <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<avr/interrupt.h>

// Pulse Width Modulation (PWM) tren chan OC1A va OC1B 

int main(){
  38:	df 93       	push	r29
  3a:	cf 93       	push	r28
  3c:	0f 92       	push	r0
  3e:	cd b7       	in	r28, 0x3d	; 61
  40:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0xFF;
  42:	e7 e3       	ldi	r30, 0x37	; 55
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	80 81       	ld	r24, Z
  48:	e7 e3       	ldi	r30, 0x37	; 55
  4a:	f0 e0       	ldi	r31, 0x00	; 0
  4c:	8f ef       	ldi	r24, 0xFF	; 255
  4e:	80 83       	st	Z, r24
	PORTB = 0x00;
  50:	e8 e3       	ldi	r30, 0x38	; 56
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	10 82       	st	Z, r1
	
	// Fast PWM: mode 14, Clear OC1A/OC1B on Compare Match, set OC1A/OC1B at Top
	TCCR1A = (1 << COM1A1) | (1 << COM1B1) | (1 << WGM11);
  56:	ef e4       	ldi	r30, 0x4F	; 79
  58:	f0 e0       	ldi	r31, 0x00	; 0
  5a:	82 ea       	ldi	r24, 0xA2	; 162
  5c:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS10); // CS10 = 1: no prescaler -> T = 1us
  5e:	ee e4       	ldi	r30, 0x4E	; 78
  60:	f0 e0       	ldi	r31, 0x00	; 0
  62:	89 e1       	ldi	r24, 0x19	; 25
  64:	80 83       	st	Z, r24

	OCR1A = 1000; // Duty cycle = 1000us = 1ms
  66:	ea e4       	ldi	r30, 0x4A	; 74
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	88 ee       	ldi	r24, 0xE8	; 232
  6c:	93 e0       	ldi	r25, 0x03	; 3
  6e:	91 83       	std	Z+1, r25	; 0x01
  70:	80 83       	st	Z, r24
	OCR1B = 5000; // Duty cycle = 1500us = 1.5ms
  72:	e8 e4       	ldi	r30, 0x48	; 72
  74:	f0 e0       	ldi	r31, 0x00	; 0
  76:	88 e8       	ldi	r24, 0x88	; 136
  78:	93 e1       	ldi	r25, 0x13	; 19
  7a:	91 83       	std	Z+1, r25	; 0x01
  7c:	80 83       	st	Z, r24

	ICR1 = 20000; // Time period = 20ms -> Top = 20ms
  7e:	e6 e4       	ldi	r30, 0x46	; 70
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 e2       	ldi	r24, 0x20	; 32
  84:	9e e4       	ldi	r25, 0x4E	; 78
  86:	91 83       	std	Z+1, r25	; 0x01
  88:	80 83       	st	Z, r24

	sei(); // set bit I cho phep ngat toan cuc
  8a:	78 94       	sei
  8c:	ff cf       	rjmp	.-2      	; 0x8c <__SREG__+0x4d>

0000008e <__vector_1>:
	while(1){
		//
	}	
}

ISR(INT0_vect){
  8e:	1f 92       	push	r1
  90:	0f 92       	push	r0
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	0f 92       	push	r0
  96:	11 24       	eor	r1, r1
  98:	df 93       	push	r29
  9a:	cf 93       	push	r28
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	
}
  a0:	cf 91       	pop	r28
  a2:	df 91       	pop	r29
  a4:	0f 90       	pop	r0
  a6:	0f be       	out	0x3f, r0	; 63
  a8:	0f 90       	pop	r0
  aa:	1f 90       	pop	r1
  ac:	18 95       	reti

000000ae <__vector_2>:

ISR(INT1_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62

}
  c0:	cf 91       	pop	r28
  c2:	df 91       	pop	r29
  c4:	0f 90       	pop	r0
  c6:	0f be       	out	0x3f, r0	; 63
  c8:	0f 90       	pop	r0
  ca:	1f 90       	pop	r1
  cc:	18 95       	reti

000000ce <_exit>:
  ce:	f8 94       	cli

000000d0 <__stop_program>:
  d0:	ff cf       	rjmp	.-2      	; 0xd0 <__stop_program>
