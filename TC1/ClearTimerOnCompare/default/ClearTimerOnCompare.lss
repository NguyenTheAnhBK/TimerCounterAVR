
ClearTimerOnCompare.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  0000014a  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000032  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000a0  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000006c  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000c2  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000030  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000a3  00000000  00000000  0000039c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	3c c0       	rjmp	.+120    	; 0x86 <__vector_6>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	46 c0       	rjmp	.+140    	; 0xd2 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
// OCR1A chua gia tri TOP (gia tri so sanh do nguoi dung dat)

volatile unsigned char val = 0; // bien volatile duoc dung trong ca chuong trinh chinh va trong cac
//trinh phuc vu ngat

int main(){
  48:	df 93       	push	r29
  4a:	cf 93       	push	r28
  4c:	0f 92       	push	r0
  4e:	cd b7       	in	r28, 0x3d	; 61
  50:	de b7       	in	r29, 0x3e	; 62
	DDRB |= 0xFF;
  52:	e7 e3       	ldi	r30, 0x37	; 55
  54:	f0 e0       	ldi	r31, 0x00	; 0
  56:	80 81       	ld	r24, Z
  58:	e7 e3       	ldi	r30, 0x37	; 55
  5a:	f0 e0       	ldi	r31, 0x00	; 0
  5c:	8f ef       	ldi	r24, 0xFF	; 255
  5e:	80 83       	st	Z, r24
	PORTB = 0x00;
  60:	e8 e3       	ldi	r30, 0x38	; 56
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	10 82       	st	Z, r1
	
	// mode 4
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS11); // Set Timer/Counter Control Register 
  66:	ee e4       	ldi	r30, 0x4E	; 78
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	8e e0       	ldi	r24, 0x0E	; 14
  6c:	80 83       	st	Z, r24
	// mode 4 (CTC), xung nhip tu chan T1 (canh xuong)
	OCR1A = 4; // gia tri can so sanh
  6e:	ea e4       	ldi	r30, 0x4A	; 74
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	84 e0       	ldi	r24, 0x04	; 4
  74:	90 e0       	ldi	r25, 0x00	; 0
  76:	91 83       	std	Z+1, r25	; 0x01
  78:	80 83       	st	Z, r24
	// mode 12
	//TCCR1B = (1 << WGM13) | (1 << WGM12) | (1 << CS12) | (1 << CS11);
	//ICR1 = 4;
	

	TIMSK = (1 << OCIE1A); // Timer/Counter Interrupt Mask Register cho phep ngat khi dem = 4
  7a:	e9 e5       	ldi	r30, 0x59	; 89
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	80 e1       	ldi	r24, 0x10	; 16
  80:	80 83       	st	Z, r24
	sei(); // set bit I cho phep ngat toan cuc
  82:	78 94       	sei
  84:	ff cf       	rjmp	.-2      	; 0x84 <main+0x3c>

00000086 <__vector_6>:

	return 0;
}

// Trinh phuc vu ngat compare match
ISR(TIMER1_COMPA_vect){
  86:	1f 92       	push	r1
  88:	0f 92       	push	r0
  8a:	0f b6       	in	r0, 0x3f	; 63
  8c:	0f 92       	push	r0
  8e:	11 24       	eor	r1, r1
  90:	8f 93       	push	r24
  92:	ef 93       	push	r30
  94:	ff 93       	push	r31
  96:	df 93       	push	r29
  98:	cf 93       	push	r28
  9a:	cd b7       	in	r28, 0x3d	; 61
  9c:	de b7       	in	r29, 0x3e	; 62
	val += 1;
  9e:	80 91 60 00 	lds	r24, 0x0060
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 60 00 	sts	0x0060, r24
	if(val == 10)
  a8:	80 91 60 00 	lds	r24, 0x0060
  ac:	8a 30       	cpi	r24, 0x0A	; 10
  ae:	11 f4       	brne	.+4      	; 0xb4 <__vector_6+0x2e>
		val = 0;
  b0:	10 92 60 00 	sts	0x0060, r1
	PORTB = val;
  b4:	e8 e3       	ldi	r30, 0x38	; 56
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 91 60 00 	lds	r24, 0x0060
  bc:	80 83       	st	Z, r24
}
  be:	cf 91       	pop	r28
  c0:	df 91       	pop	r29
  c2:	ff 91       	pop	r31
  c4:	ef 91       	pop	r30
  c6:	8f 91       	pop	r24
  c8:	0f 90       	pop	r0
  ca:	0f be       	out	0x3f, r0	; 63
  cc:	0f 90       	pop	r0
  ce:	1f 90       	pop	r1
  d0:	18 95       	reti

000000d2 <_exit>:
  d2:	f8 94       	cli

000000d4 <__stop_program>:
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <__stop_program>
